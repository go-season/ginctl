package route

import (
	"fmt"
	"os"
	"sort"

	"github.com/go-season/ginctl/pkg/generator"

	"github.com/go-season/ginctl/pkg/ginctl/doc"
	"github.com/go-season/ginctl/pkg/util"
	"github.com/go-season/ginctl/pkg/util/factory"
	"github.com/spf13/cobra"
)

type RefreshCmd struct {
	Verbose bool
}

func NewRefreshCmd(f factory.Factory) *cobra.Command {
	cmd := &RefreshCmd{}

	routeCmd := &cobra.Command{
		Use:   "refresh",
		Short: "更新项目路由定义.",
		Args:  cobra.NoArgs,
		RunE: func(cobraCmd *cobra.Command, args []string) error {
			return cmd.Run(f, cobraCmd, args)
		},
		PostRun: func(cobraCmd *cobra.Command, args []string) {
			f.GetLog().WriteString("you can")
		},
	}

	routeCmd.Flags().BoolVarP(&cmd.Verbose, "verbose", "v", false, "output verbose info.")

	return routeCmd
}

func (cmd *RefreshCmd) Run(f factory.Factory, cobraCmd *cobra.Command, args []string) error {
	cwd, err := os.Getwd()
	if err != nil {
		return err
	}

	searchDir := fmt.Sprintf("%s/api/rest", cwd)

	pkgs := doc.NewPackagesDefinitions()
	parser := doc.NewParser(
		doc.WithWorkDir(cwd),
		doc.WithDebug(cmd.Verbose),
		doc.WithPackagesDefinitions(pkgs),
		doc.WithExcludedDirsAndFiles(fmt.Sprintf("%s/hello", searchDir)))

	f.GetLog().Info("start scanning rest path...")
	f.GetLog().WriteString("\n")

	err = parser.ParseAPI(searchDir)
	if err != nil {
		return fmt.Errorf("%s. you can use `-v` flag to show debug info", err.Error())
	}

	if err = parser.Packages.RangeFiles(parser.ParseAPIInfo); err != nil {
		return fmt.Errorf("%s you can use `-v` flag to show debug info", err.Error())
	}

	sort.Strings(parser.Apis)
	sortAPIs := make([]string, 0, len(parser.Apis))
	for _, api := range parser.Apis {
		sortAPIs = append(sortAPIs, parser.ApiMap[api])
	}

	modeName := util.GetModuleName(cwd)

	imports := parser.ImportPaths
	if parser.IsHasMiddleware {
		imports = append(imports, fmt.Sprintf("\"%s/%s\"", modeName, "pkg/middleware"))
	}

	g := generator.NewGenerator()
	g.P("// Code generated by ginctl. DO NOT EDIT.")
	g.P()
	g.P("package rest")
	g.P()
	if len(imports) > 1 {
		g.P("import (")
		for _, imp := range imports {
			g.P(imp)
		}
		g.P(")")
	} else {
		if len(imports) == 1 {
			g.P("import ", imports[0])
		}
	}
	g.P()
	g.P("func registerRoute() {")
	for _, sortAPI := range sortAPIs {
		g.P(sortAPI)
	}
	g.P("}")
	g.P()
	file := fmt.Sprintf("%s/api/rest/api.go", cwd)
	os.Remove(file)
	if err := g.GenerateFile(file); err != nil {
		return err
	}

	f.GetLog().WriteString("\n")
	f.GetLog().Done("Refresh route successful")

	return nil
}
