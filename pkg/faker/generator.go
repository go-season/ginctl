package faker

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"os"
	"strconv"

	"gopkg.in/yaml.v2"

	"github.com/go-season/ginctl/pkg/util/log"
	"github.com/go-season/ginctl/pkg/util/str"
)

type Table struct {
	Name   string   `yaml:"name"`
	Fields []string `yaml:"fields"`
}

type DB struct {
	Name   string  `yaml:"name"`
	Tables []Table `yaml:"tables"`
}

type Faker struct {
	Faker []DB `yaml:"faker"`
}

type Generator struct {
	*bytes.Buffer

	wd      string
	log     log.Logger
	config  string
	faker   Faker
	preview bool
}

type Option func(*Generator)

func WithPreview(preview bool) Option {
	return func(g *Generator) {
		g.preview = preview
	}
}

func WithLogger(log log.Logger) Option {
	return func(g *Generator) {
		g.log = log
	}
}

func WithWorkDir(wd string) Option {
	return func(g *Generator) {
		g.wd = wd
	}
}

func NewGenerator(opts ...Option) *Generator {
	g := &Generator{
		Buffer: new(bytes.Buffer),
	}

	for _, opt := range opts {
		opt(g)
	}

	return g
}

func (g *Generator) Parse(file string) error {
	fs, err := os.Open(file)
	if err != nil {
		return err
	}
	defer fs.Close()

	b, err := ioutil.ReadAll(fs)
	if err != nil {
		return err
	}

	if err = yaml.Unmarshal(b, &g.faker); err != nil {
		return err
	}

	return nil
}

func (g *Generator) GenFaker() {
	g.generateHeader()
	g.generateFaker()
	g.generateFooter()

	err := g.generateFile(fmt.Sprintf("%s/pkg/faker/faker.go", g.wd))
	if err != nil {
		panic(err)
	}
}

func (g *Generator) generateFaker() {
	g.P("type Value struct {")
	g.P("Value string `json:", strconv.Quote("value"), "`")
	g.P("}")
	g.P()
	g.P("type Response struct {")
	g.P("Content Value `json:", strconv.Quote("content"), "`")
	g.P("}")
	g.P()
	for _, db := range g.faker.Faker {
		for _, table := range db.Tables {
			pascalName := str.ToPascal(table.Name)
			camelName := str.SnakeToLowerCamel(table.Name)
			shortName := str.ToShort(table.Name)
			g.P("type ", pascalName, " interface {")
			for _, field := range table.Fields {
				g.P(str.ToPascal(field), "(v reflect.Value) (interface{}, error)")
			}
			g.P("}")
			g.P()
			g.P("type ", camelName, " struct{}")
			g.P()
			g.P("func (", shortName, " ", camelName, ") DBName() string {")
			g.P("return ", strconv.Quote(db.Name))
			g.P("}")
			g.P()
			g.P("func Get", str.ToPascal(db.Name), str.ToPascal(table.Name), "() ", str.ToPascal(table.Name), " {")
			g.P("return &", camelName, "{}")
			g.P("}")
			g.P()
			for _, field := range table.Fields {
				g.P("func (", shortName, " ", camelName, ") ", str.ToPascal(field), "(v reflect.Value) (interface{}, error) {")
				g.P("resp, err := sendRequest(", shortName, ".DBName(),", strconv.Quote(table.Name), ",", strconv.Quote(field), ")")
				g.P("if err != nil {")
				g.P("return v.Interface(), nil")
				g.P("}")
				g.P()
				g.P("b, err := ioutil.ReadAll(resp.Body)")
				g.P("if err != nil {")
				g.P("return v.Interface(), nil")
				g.P("}")
				g.P()
				g.P("var res Response")
				g.P("if err = json.Unmarshal(b, &res); err != nil {")
				g.P("return nil, err")
				g.P("}")
				g.P()
				g.P("return utilfaker.FormatValue(v.Type(), []byte(res.Content.Value)), nil")
				g.P("}")
				g.P()
			}
		}
	}
}

func (g *Generator) generateHeader() {
	g.P("// Code generated by ginctl. DO NOT EDIT.")
	g.P()
	g.P("package faker")
	g.P()
	g.P("import (")
	g.P(strconv.Quote("fmt"))
	g.P(strconv.Quote("github.com/bxcodec/faker/v3"))
	g.P(strconv.Quote("io/ioutil"))
	g.P(strconv.Quote("net/http"))
	g.P(strconv.Quote("encoding/json"))
	g.P(strconv.Quote("reflect"))
	g.P("utilfaker ", strconv.Quote("github.com/go-season/common/util/faker"))
	g.P(")")
	g.P()
	g.P("const mockServerAddr = ", strconv.Quote("http://test-service-backend.xiaozhu.com/mock/info"))
	g.P()
	g.P("func sendRequest(dbname, table, field string) (*http.Response, error) {")
	g.P("return http.DefaultClient.Get(fmt.Sprintf(", strconv.Quote("%s?db=%s&table=%s&field=%s"), ", mockServerAddr, dbname, table, field))")
	g.P("}")
	g.P()
}

func (g *Generator) generateFooter() {
	g.P("func LoadProvider() {")

	for _, db := range g.faker.Faker {
		for _, table := range db.Tables {
			for _, field := range table.Fields {
				g.P(
					"_ = faker.AddProvider(",
					strconv.Quote(fmt.Sprintf("ms:%s.%s.%s", db.Name, str.SnakeToLowerCamel(table.Name), str.SnakeToLowerCamel(field))),
					", Get", str.ToPascal(db.Name), str.ToPascal(table.Name), "().", str.ToPascal(field), ")")
			}
		}
	}

	g.P("}")
}

func (g *Generator) P(str ...string) {
	for _, v := range str {
		g.WriteString(v)
	}
	g.WriteByte('\n')
}

func (g *Generator) generateFile(file string) error {
	fset := token.NewFileSet()
	original := g.Bytes()
	fileAST, err := parser.ParseFile(fset, "", original, parser.ParseComments)
	if err != nil {
		return err
	}
	ast.SortImports(fset, fileAST)
	g.Reset()

	(&printer.Config{Mode: printer.TabIndent | printer.UseSpaces, Tabwidth: 8}).Fprint(g, fset, fileAST)
	os.Remove(file)
	fs, err := os.OpenFile(file, os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	defer fs.Close()

	if g.preview {
		fmt.Println(g.String())
		return nil
	}

	fs.Write(g.Bytes())

	return nil
}
